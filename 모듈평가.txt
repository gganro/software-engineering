1. 결합도(Coupling) 평가

    User ↔ App
    결합도 유형: 자료 결합

    근거: app.show_login(), app.login(id, pw) 등으로 명시적으로 메서드를 호출하며, 단순 데이터(id, pw, menu_item)를 인자로 전달.

    App ↔ AuthServer
    결합도 유형: 자료 결합

    근거: auth_server.authenticate(id, pw) 형태로 단순 인자 전달.

    App ↔ Server
    결합도 유형: 자료 결합

    근거: get_menu() 및 process_order() 호출 시 인자로 기본 데이터만 전달.

    Server ↔ Restaurant, DeliveryAgent
    결합도 유형: 스탬프 결합

    근거: restaurant.receive_order(menu_item) 등은 객체 자체를 전달하여 내부 동작을 유도.

    다만 DeliveryAgent에 구체적인 요청 흐름을 제어하는 경우도 있어 부분적으로 제어 결합의 성격도 있음.

    공통 결합 / 내용 결합 없음
    전역 변수 사용이나 다른 클래스의 내부 상태에 직접 접근하는 사례는 없음.

    결론 : 전체적으로 결합도는 낮은 편이며, 대부분 자료 결합 또는 일부 스탬프 결합, 경계성 있는 제어 결합으로 설계되어 있다. 결합도 측면에서는 양호한 구조이다.

2. 응집도(Cohesion) 평가

    User
    응집도: 기능적 응집

    근거: 사용자 역할 수행(앱 실행, 로그인, 메뉴 탐색, 주문, 음식 수령)이라는 단일 목적에 집중.

    App
    응집도: 순차적 응집

    근거: 인증 → 메뉴 요청 → 주문 처리 순으로 자연스러운 흐름에 따라 수행됨.

    AuthServer
    응집도: 기능적 응집

    근거: 인증이라는 단 하나의 기능에 집중.

    Server
    응집도: 절차적 응집 또는 순차적 응집

    근거: 주문 처리 과정을 단계적으로 수행하며 관련된 구성요소와 협력함. 그러나 모든 단계가 Server 안에 존재하므로 기능적으로는 조금 분산됨.

    Restaurant
    응집도: 기능적 응집

    근거: 주문 수령, 접수, 음식 준비 등 식당의 기능에 집중.

    DeliveryAgent
    응집도: 기능적 응집

    근거: 배차 수락, 음식 픽업 및 배달 수행 등 배달 업무에 집중.

    결론 : 전반적으로 응집도는 기능적 또는 순차적 수준으로 높음. 각 클래스는 단일 책임 원칙에 비교적 충실함.

3. 요약 평가표
    모듈명	          결합도	                     응집도	                  설명
    User	         자료 결합	             기능적 응집	              사용자 행동 중심으로 역할이 명확
    App	                 자료 결합	             순차적 응집	              앱 기능 흐름(인증→주문) 중심 구성
    AuthServer	         자료 결합	             기능적 응집	              단일 인증 기능에 집중
    Server	         스탬프/제어 결합             순차적/절차적 응집	      외부 모듈 조정하는 역할
    Restaurant   	 자료 결합	             기능적 응집	              주문 수령 및 음식 준비 중심
    DeliveryAgent	 자료 결합                    기능적 응집	              배달 기능 중심 역할

4. 종합 결론
   
    결합도는 낮고, 대부분 자료 결합 또는 간단한 스탬프 결합 수준.
    응집도는 높은 편으로, 대부분 기능적으로 잘 분리됨.
    Server 클래스는 상대적으로 여러 단계의 흐름을 조율하고 있어 약간의 절차적 성격이 섞여 있음. 
    이는 추후 주문 처리 책임을 핸들러 클래스로 분리하면 더 개선될 수 있음.
